service: recon-api

custom:
  accountId: '#{AWS::AccountId}'

provider:
 name: aws
 runtime: nodejs14.x
 memorySize: 1024
#  timeout: 900
 stage: production
 region: us-east-1
 environment:
  CONNECTION_DB_TABLE: ${self:resources.Resources.MessageTable.Properties.TableName}
  WEBSOCKET_REPORT_GENERATION_LAMBDA_NAME: recon-api-${self:provider.stage}-websocket-generate-report
  # you can add statements to the Lambda function's IAM Role here
 iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [MessageTable, Arn]
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:us-east-1:036135274485:function:recon-api-production-websocket-generate-report

functions:
 api:
   handler: lambda.universal
   events:
     - http: ANY /{proxy+}
     - http: ANY /
 handle-websocket-requests:
  handler: handler.handleRequests
  events:
    - websocket:
        route: $connect
    - websocket:
        route: $disconnect
    - websocket:
        route: $default
    - websocket:
        route: getReport
    - websocket:
        route: heartbeat
 websocket-generate-report:
  handler: handler.generate
  timeout: 900


configValidationMode: error
resources:
  Resources:
    MessageTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "connectionId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "connectionId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
        TableName: AppConnectionTable